name: Docker build and test

# https://stackoverflow.com/a/67136237
on:
  pull_request:
  push:
  workflow_dispatch: #So we can trigger Workflow runs using `gh workflow run "test.yaml" --ref branch

jobs:
  build:
    timeout-minutes: 30
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
      # Agressive cache invalidation: https://github.com/satackey/action-docker-layer-caching/issues/55
      # - run: echo "WEEK=$(date +%U)" >> $GITHUB_ENV
      # - uses: satackey/action-docker-layer-caching@v0.0.11
      #   # Ignore the failure of a step and avoid terminating the job.
      #   continue-on-error: true
      #   with:
      #     key: ${{ github.workflow }}-${{ env.WEEK }}-{hash}
      #     restore-keys: |
      #       ${{ github.workflow }}-${{ env.WEEK }}-
      - name: Install Problem Matchers
        if: ${{ github.event_name == 'pull_request' }}
        run: echo "::add-matcher::.github/problem-matcher.json"
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install pipenv & Setting up environment
        run: |
          python -m pip install --upgrade pipenv wheel
          sudo apt-get update
          sudo apt-get install -y imagemagick icc-profiles-free ghostscript libgit2-dev
      - id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      - name: Install Dependencies
        run: |
          pip install -r nebuchadnezzar/requirements/main.txt -r nebuchadnezzar/requirements/lint.txt -r nebuchadnezzar/requirements/test.txt
      - name: Test
        run: make --directory=./nebuchadnezzar test
      - name: Lint
        run: make --directory=./nebuchadnezzar lint
      - name: Install submodules
        run: ./install-submodules.sh
      - name: update visual dependency graphs and verify typescript code builds concourse files and the step-config.json file
        run: CI_TEST=true ./test/test-step-00.bash
      - name: prepare directories and build container
        run: CI_TEST=true ./test/test-step-01.bash
      - name: Run all-pdf
        run: CI_TEST=true ./test/test-step-02.bash
      - name: Run all-web
        run: CI_TEST=true ./test/test-step-03.bash
      - name: Run all-docx
        run: CI_TEST=true ./test/test-step-05.bash
      - name: Run the last step of all-docx (git-convert-docx)
        run: CI_TEST=true ./test/test-step-06.bash
      - name: Run all-pptx
        run: CI_TEST=true ./test/test-step-07.bash
      - name: Run all-epub
        run: CI_TEST=true ./test/test-step-11.bash
      - name: Run Bakery Scripts Tests
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: CI_TEST=true ./test/test-step-10.bash
      - name: Run CORGI Concourse Resource Tests
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: CI_TEST=true ./test/test-step-12.bash
      - name: Collect coverage and upload
        run: CI_TEST=true ./test/test-step-08.bash
      - name: Lint scripts
        run: CI_TEST=true ./test/test-step-09.bash
